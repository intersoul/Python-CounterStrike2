# import pygame as pg  # 导入pygame库并简化命名为pg

# _ = False  # 创建一个用于迷你地图的空值
# # 迷你地图的布局：1表示墙壁，2表示道具，3表示敌人，4表示特殊物体，5表示其他元素
# mini_map = [
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 第一行全是墙壁
#     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第二行边缘墙壁，中间为空
#     [1, _, _, 3, 3, 3, 3, _, _, _, 2, 2, 2, _, _, 1],  # 第三行有敌人和道具
#     [1, _, _, _, _, _, 4, _, _, _, _, _, 2, _, _, 1],  # 第四行有一个特殊物体
#     [1, _, _, _, _, _, 4, _, _, _, _, _, 2, _, _, 1],  # 第五行同样有特殊物体
#     [1, _, _, 3, 3, 3, 3, _, _, _, _, _, _, _, _, 1],  # 第六行有敌人
#     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第七行边缘墙壁，中间为空
#     [1, _, _, _, 4, _, _, _, 4, _, _, _, _, _, _, 1],  # 第八行有两个特殊物体
#     [1, 1, 1, 3, 1, 3, 1, 1, 1, 3, _, _, 3, 1, 1, 1],  # 第九行有多个敌人
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _, _, 3, 1, 1, 1],  # 第十行有敌人
#     [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _, _, 3, 1, 1, 1],  # 第十一行同样有敌人
#     [1, 1, 3, 1, 1, 1, 1, 1, 1, 3, _, _, 3, 1, 1, 1],  # 第十二行有多个敌人
#     [1, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第十三行有特殊物体
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第十四行有敌人
#     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第十五行边缘墙壁，中间为空
#     [1, _, _, 2, _, _, _, _, _, 3, 4, _, 4, 3, _, 1],  # 第十六行有道具和特殊物体
#     [1, _, _, 5, _, _, _, _, _, _, 3, _, 3, _, _, 1],  # 第十七行有其他元素
#     [1, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第十八行有道具
#     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第十九行边缘墙壁，中间为空
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],  # 第二十行有敌人
#     [1, 4, _, _, _, _, _, _, 4, _, _, 4, _, _, _, 1],  # 第二十一行有多个特殊物体
#     [1, 1, 3, 3, _, _, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1],  # 第二十二行有敌人和空白
#     [1, 1, 1, 3, _, _, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 第二十三行有敌人
#     [1, 3, 3, 4, _, _, 4, 3, 3, 3, 3, 3, 3, 3, 3, 1],  # 第二十四行有敌人和特殊物体
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],  # 第二十五行有敌人
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],  # 第二十六行有敌人
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],  # 第二十七行有敌人
#     [3, _, _, 5, _, _, _, 5, _, _, _, 5, _, _, _, 3],  # 第二十八行有其他元素
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],  # 第二十九行有敌人
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],  # 第三十行有敌人
#     [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],  # 第三十一行有敌人
#     [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],  # 第三十二行全是墙壁
# ]


# class Map:
#     def __init__(self, game):
#         self.game = game  # 存储游戏实例
#         self.mini_map = mini_map  # 保存迷你地图
#         self.world_map = {}  # 初始化世界地图字典
#         self.rows = len(self.mini_map)  # 记录迷你地图的行数
#         self.cols = len(self.mini_map[0])  # 记录迷你地图的列数
#         self.get_map()  # 获取世界地图

#     def get_map(self):
#         # 将迷你地图转换为世界地图的坐标字典
#         for j, row in enumerate(self.mini_map):  # 遍历每一行
#             for i, value in enumerate(row):  # 遍历每一列
#                 if value:  # 如果该位置是一个有效的值（不是空值）
#                     self.world_map[(i, j)] = value  # 在世界地图字典中记录坐标与值

#     def draw(self):
#         # 绘制世界地图
#         [pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100, 100, 100), 2) 
#          for pos in self.world_map]  # 绘制每一个墙壁的矩形


import pygame as pg
from settings import *

_ = False
mini_map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, 3, 3, 3, _, 2, 2, 2, _, _, 1],
    [1, _, _, 3, _, 4, _, 2, _, 2, _, _, 1],
    [1, _, _, 3, _, 4, _, 2, _, 2, _, _, 1],
    [1, _, _, 3, 3, 3, _, 2, 2, 2, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, 3, 3, 3, _, 2, 2, 2, _, _, 1],
    [1, _, _, 3, _, 4, _, 2, _, 2, _, _, 1],
    [1, _, _, 3, 3, 3, _, 2, 2, 2, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1],

]



class Map:
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map
        self.world_map = {}
        self.rows = len(self.mini_map)
        self.cols = len(self.mini_map[0])
        self.get_map()

    def get_map(self):
        for j, row in enumerate(self.mini_map):
            for i, value in enumerate(row):
                if value:
                    self.world_map[(i, j)] = value

    def draw(self):
        # 绘制世界地图, 缩2倍显示到左上角显示

        [pg.draw.rect(self.game.screen, 'black', (pos[0] * MINI_MAP_SIZE, pos[1] * MINI_MAP_SIZE, MINI_MAP_SIZE, MINI_MAP_SIZE), 2)
         for pos in self.world_map]